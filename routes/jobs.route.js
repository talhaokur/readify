import { Router } from 'express';
import { PageService } from '../services/page.service.js';
import * as path from 'path';
import { epubService } from '../services/epub.service.js';
import { HttpStatusCode } from 'axios';
import { jobContainerService } from '../services/jobcontainer.service.js';
import fs from 'node:fs';
import { GLOBALS } from '../configs.js';

const router = Router();

function isValidUUID(uuid) {
    const regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    return regex.test(uuid);
}

function getEntityURL(req, id) {
    const requestUrl = req.protocol + '://' + req.get('host') + req.originalUrl;
    return new URL(`${requestUrl}/${id}`, requestUrl); 
}

router.post('/', async (req, res, next) => {
    const { url } = req.body;

    if (!url) {
        return res.status(HttpStatusCode.BadRequest).json({ error: 'URL is required' });
    }
    console.log("new request for: ", );
    try {
        const [jobId, repo] = await jobContainerService.initializeJob();
        const pgs = new PageService(url, repo);
        await pgs.loadPage();

        const content = pgs.article.content;
        const pageTitle = pgs.title;

        const options = {
            title: pageTitle,
            author: 'readify',
            publisher: 'Generated by Node.js',
            version: 3,
            content: [
                {
                    title: pageTitle,
                    data: `<div>${content}</div>`,
                },
            ],
            cover: pgs.downloadedImages[0] || '',
        };

        const epubFilePath = path.join(repo, `${pageTitle}.epub`);
        await epubService.generateEpub(options, epubFilePath);
        jobContainerService.deleteImageRepositoryForJob(jobId);
        const entityUrl = getEntityURL(req, jobId);
        return res.status(HttpStatusCode.Created).json({ jobId: jobId, entity: entityUrl});
    } catch (error) {
        next(error);
    }
});

router.get('/', (req, res) => {
    // TODO
    return res.status(HttpStatusCode.NotImplemented).json();
});

router.get("/:uuid", async (req, res, next) => {
    const { uuid } = req.params;
    if (!isValidUUID(uuid))
        return res.status(HttpStatusCode.BadRequest).json({ message: `Given id is not valid` });
    const jobRepository = path.join(GLOBALS.outputDir, uuid);

    if (!fs.existsSync(jobRepository))
        return res.status(HttpStatusCode.NotFound).json({ message: `No job found with id:${uuid}` });

    try {
        const epubPath = epubService.getEpubFilePath(jobRepository, (p) => { return p; });
        if (!epubPath)
            return res.status(HttpStatusCode.NotFound).json({ message: "No ePub found!" });

        return res.download(epubPath);
    } catch (error) {
        console.error('error during getting epub file for', uuid, error);
    }
});

router.delete("/:uuid", (req, res, next) => {
    const { uuid } = req.params;
    if (!isValidUUID(uuid))
        return res.status(HttpStatusCode.BadRequest).json({ message: `Given id is not valid` });

    const jobRepository = path.join(GLOBALS.outputDir, uuid);

    if (!fs.existsSync(jobRepository))
        return res.status(HttpStatusCode.NotFound).json({ message: `No job found with id:${uuid}` });

    try {
        jobContainerService.deleteRepository(uuid);
        return res.status(HttpStatusCode.Ok).json({ message: `Job ${uuid} deleted successfully` });
    } catch (error) {
        console.error("Error during deletion of the job repository for ", uuid, error);
        next(error);
    }
});

export default router;