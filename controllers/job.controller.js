import { v4 } from "uuid";
import { fileService } from "../services/file.service.js";
import { HttpStatusCode } from "axios";
import * as path from 'path';
import Page from "../models/page.model.js";
import { PageService } from "../services/page.service.js";
import * as epubService  from "../services/epub.service.js";
import * as jobService from "../services/job.service.js";
import InvalidIdError from "../errors/invalid-id.error.js";
import { JobStatus } from '../models/job.model.js';


function populatePageObjs(urls) {
    const pages = [];

    urls.forEach(url => {
        pages.push(new Page(url));
    });

    return pages;
}

function isValidUUID(uuid) {
    const regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    return regex.test(uuid);
}

const runJob = async (jobId, urls, title, author, coverImageUrl) => {
    try {
        const repo = await fileService.initializeJob(jobId);
        const pages = populatePageObjs(urls);
        const pgs = new PageService(pages, repo);
        await pgs.loadPages();

        const options = {
            title: title,
            author: author || 'readify',
            publisher: 'Generated by readify app',
            version: 3,
            content: pgs.getAllContent(),
            cover: coverImageUrl || '',
        };

        const epubFilePath = path.join(repo, `${title}.epub`);
        await epubService.generateEpub(options, epubFilePath);
        fileService.cleanUpRepository(jobId);
    } catch (error) {
        console.error('Error during running a job. Repository will be marked. Error:', error.message);
        fileService.markJobRepository(jobId);
    }
};

export const createJob = async (req) => {
    const { urls, title, author, coverImageUrl } = req.body;
    const jobId = v4();
    runJob(jobId, urls, title, author, coverImageUrl);
    return jobId;
};

export const getJob = (req, res) => {
    const { uuid } = req.params;

    // TODO move this part to validators
    if (!isValidUUID(uuid))
        throw new InvalidIdError(`${uuid} is invalid`);

    const job = jobService.getJob(uuid);

    switch (job.status) {
        case JobStatus.SUCCESS:
            return res.download(job.artifactPath);
        case JobStatus.FAILED:
            return res.status(HttpStatusCode.Ok).json(job);
        case JobStatus.RUNNING:
            return res.status(HttpStatusCode.Accepted).json(job);
    }
};

export const deleteJob = (req, res) => {
    const { uuid } = req.params;

    // TODO move this part to validators
    if (!isValidUUID(uuid))
        return res.status(HttpStatusCode.BadRequest).json({
            message: `Given id is not valid`
        });

    jobService.deleteJob(uuid);
};